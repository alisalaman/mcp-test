[project]
name = "ai-agent-app"
version = "0.1.0"
description = "Production-ready AI agent application with LangGraph and MCP"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Your Team", email = "team@company.com"}
]
keywords = ["ai", "agent", "langgraph", "mcp", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # Phase 2 Infrastructure Dependencies
    "asyncpg>=0.29.0",
    "redis[hiredis]>=5.0.0",
    "structlog>=23.2.0",
    # Basic utilities
    "python-dotenv>=1.0.0",
    "tenacity>=9.1.2",
    "httpx>=0.28.1",
]

[project.scripts]
# Application scripts
ai-agent = "ai_agent.main:main"
ai-agent-dev = "ai_agent.main:dev_main"

# Development scripts
lint = "scripts.lint:main"
format = "scripts.format:main"
test = "scripts.test:main"
setup-dev = "scripts.setup:main"

[project.optional-dependencies]
full = [
    # Workflow Engine
    "langgraph>=0.0.40",
    "langchain-core>=0.1.0",  # Required by LangGraph

    # Resilience & HTTP
    "tenacity>=8.2.0",
    "pybreaker>=1.0.0",
    "slowapi>=0.1.9",
    "httpx>=0.25.0",
    "anyio>=4.0.0",

    # Database & Persistence
    "asyncpg>=0.29.0",
    "redis[hiredis]>=5.0.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.12.0",

    # LLM Providers
    "openai>=1.3.0",
    "anthropic>=0.5.0",
    "google-generativeai>=0.3.0",

    # Secret Management
    "boto3>=1.34.0",
    "azure-keyvault-secrets>=4.7.0",
    "google-cloud-secret-manager>=2.18.0",

    # Observability
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.40b0",
    "opentelemetry-instrumentation-httpx>=0.40b0",
    "opentelemetry-instrumentation-redis>=0.40b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.40b0",

    # Utilities
    "python-multipart>=0.0.6",  # File uploads
    "python-jose[cryptography]>=3.3.0",  # JWT handling
    "passlib[bcrypt]>=1.7.4",  # Password hashing
    "email-validator>=2.1.0",  # Email validation
]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "locust>=2.17.0",

    # Development Tools
    "mypy>=1.7.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "pre-commit>=3.5.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

production = [
    # Production monitoring
    "sentry-sdk[fastapi]>=1.38.0",
    "gunicorn>=21.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ai_agent", "scripts"]

# Black configuration
[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
"scripts/*" = ["E402"]
"examples/*" = ["E402"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/ai_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "external: Tests requiring external services",
    "asyncio: Async tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/conftest.py",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
]
